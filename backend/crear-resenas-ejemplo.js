// Script para crear rese√±as de ejemplo en la base de datos
import mongoose from 'mongoose';
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Conexi√≥n a MongoDB
const mongoUri = 'mongodb+srv://Verduleria:Prueba1234@cluster0.lzugghn.mongodb.net/verduleria?retryWrites=true&w=majority&appName=Cluster0';

// Esquema de rese√±a
const { Schema, model } = mongoose;

const Rese√±aSchema = new Schema({
  usuario: {
    nombre: { type: String, required: true },
    email: { type: String, required: true }
  },
  calificacion: { 
    type: Number, 
    required: true, 
    min: 1, 
    max: 5 
  },
  comentario: { 
    type: String, 
    required: true,
    maxlength: 500
  },
  fecha_rese√±a: { type: Date, default: Date.now },
  aprobada: { type: Boolean, default: false },
  producto: { 
    type: String, 
    default: 'general'
  },
  pedido_id: { 
    type: Schema.Types.ObjectId, 
    ref: 'Pedido',
    required: false
  }
});

const Rese√±a = model('Rese√±a', Rese√±aSchema);

// Rese√±as de ejemplo
const rese√±asEjemplo = [
  {
    usuario: {
      nombre: 'Mar√≠a Gonz√°lez',
      email: 'maria.gonzalez@email.com'
    },
    calificacion: 5,
    comentario: 'Excelente servicio y productos muy frescos. Las frutas llegaron en perfecto estado y el delivery fue muy puntual. Definitivamente volver√© a comprar.',
    aprobada: true,
    producto: 'Banana'
  },
  {
    usuario: {
      nombre: 'Juan Carlos P√©rez',
      email: 'juan.perez@email.com'
    },
    calificacion: 4,
    comentario: 'Buena calidad de verduras y precios competitivos. El proceso de compra es muy f√°cil a trav√©s de la web. Solo mejoraria un poco los tiempos de entrega.',
    aprobada: true,
    producto: 'Lechuga'
  },
  {
    usuario: {
      nombre: 'Ana Rodr√≠guez',
      email: 'ana.rodriguez@email.com'
    },
    calificacion: 5,
    comentario: 'Las naranjas estaban incre√≠blemente jugosas y dulces. El empaque fue cuidadoso y todo lleg√≥ en excelente estado. Recomiendo esta verduler√≠a.',
    aprobada: true,
    producto: 'Naranja'
  },
  {
    usuario: {
      nombre: 'Carlos Mart√≠nez',
      email: 'carlos.martinez@email.com'
    },
    calificacion: 4,
    comentario: 'Buen servicio en general. Las papas estaban frescas y de buena calidad. El sitio web es f√°cil de usar y el proceso de pago es seguro.',
    aprobada: false, // Pendiente de aprobaci√≥n
    producto: 'Papa'
  },
  {
    usuario: {
      nombre: 'Laura Fern√°ndez',
      email: 'laura.fernandez@email.com'
    },
    calificacion: 5,
    comentario: 'Incre√≠ble frescura en todos los productos. La variedad es excelente y los precios muy justos. El equipo de atenci√≥n al cliente es muy amable.',
    aprobada: true,
    producto: 'general'
  },
  {
    usuario: {
      nombre: 'Roberto Silva',
      email: 'roberto.silva@email.com'
    },
    calificacion: 3,
    comentario: 'El producto est√° bien pero el delivery se demor√≥ m√°s de lo esperado. La calidad de las verduras es buena pero podr√≠an mejorar los tiempos.',
    aprobada: false, // Pendiente de aprobaci√≥n
    producto: 'Zanahoria'
  },
  {
    usuario: {
      nombre: 'Patricia L√≥pez',
      email: 'patricia.lopez@email.com'
    },
    calificacion: 5,
    comentario: 'Perfecta experiencia de compra. Todo muy fresco, bien empacado y entregado a tiempo. Definitivamente mi verduler√≠a online favorita.',
    aprobada: true,
    producto: 'Manzana'
  },
  {
    usuario: {
      nombre: 'Diego Morales',
      email: 'diego.morales@email.com'
    },
    calificacion: 4,
    comentario: 'Las frutas est√°n muy buenas y el precio es razonable. Solo sugiero que agreguen m√°s variedad de productos org√°nicos.',
    aprobada: false, // Pendiente de aprobaci√≥n
    producto: 'Pera'
  }
];

async function crearRese√±asEjemplo() {
  try {
    console.log('üîÑ Conectando a MongoDB...');
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Conectado a MongoDB');

    // Limpiar rese√±as existentes (opcional)
    console.log('üóëÔ∏è Limpiando rese√±as existentes...');
    await Rese√±a.deleteMany({});

    // Crear nuevas rese√±as
    console.log('üìù Creando rese√±as de ejemplo...');
    const rese√±asCreadas = await Rese√±a.insertMany(rese√±asEjemplo);
    
    console.log(`‚úÖ ${rese√±asCreadas.length} rese√±as creadas exitosamente:`);
    rese√±asCreadas.forEach((rese√±a, index) => {
      console.log(`${index + 1}. ${rese√±a.usuario.nombre} - ${rese√±a.calificacion}‚≠ê - ${rese√±a.aprobada ? 'Aprobada' : 'Pendiente'}`);
    });

    // Mostrar estad√≠sticas
    const total = await Rese√±a.countDocuments();
    const aprobadas = await Rese√±a.countDocuments({ aprobada: true });
    const pendientes = await Rese√±a.countDocuments({ aprobada: false });
    
    console.log('\nüìä Estad√≠sticas:');
    console.log(`Total: ${total}`);
    console.log(`Aprobadas: ${aprobadas}`);
    console.log(`Pendientes: ${pendientes}`);

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üì° Desconectado de MongoDB');
    process.exit(0);
  }
}

crearRese√±asEjemplo();
