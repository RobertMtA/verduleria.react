import fetch from 'node-fetch';

const testEmailRecoveryFlow = async () => {
  try {
    console.log('üß™ PRUEBA COMPLETA DEL FLUJO DE RECUPERACI√ìN DE CONTRASE√ëA');
    console.log('=' .repeat(60));
    
    const email = 'robertogaona1985@gmail.com';
    
    // Paso 1: Solicitar reset de contrase√±a
    console.log('\nüìß PASO 1: Solicitando reset de contrase√±a...');
    
    const forgotResponse = await fetch('http://localhost:4001/api/forgot_password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email })
    });
    
    const forgotData = await forgotResponse.json();
    
    console.log('‚úÖ Solicitud enviada:');
    console.log('  - Status:', forgotResponse.status);
    console.log('  - Success:', forgotData.success);
    console.log('  - Message:', forgotData.message);
    
    if (!forgotData.success || !forgotData.resetUrl) {
      console.log('‚ùå Error: No se gener√≥ el enlace de reset');
      return;
    }
    
    // Extraer token
    const token = forgotData.resetUrl.split('/').pop();
    console.log('\nüé´ Token generado:', token.substring(0, 20) + '...');
    console.log('üîó URL completa:', forgotData.resetUrl);
    
    // Paso 2: Simular que el usuario hace clic en el enlace y cambia su contrase√±a
    console.log('\nüîÑ PASO 2: Simulando reset de contrase√±a...');
    
    const newPassword = 'nuevaContrasena' + Date.now();
    
    const resetResponse = await fetch('http://localhost:4001/api/reset_password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        token: token,
        newPassword: newPassword
      })
    });
    
    const resetData = await resetResponse.json();
    
    console.log('‚úÖ Contrase√±a actualizada:');
    console.log('  - Status:', resetResponse.status);
    console.log('  - Success:', resetData.success);
    console.log('  - Message:', resetData.message);
    
    if (!resetData.success) {
      console.log('‚ùå Error:', resetData.error);
      return;
    }
    
    // Paso 3: Verificar que el login funciona con la nueva contrase√±a
    console.log('\nüîê PASO 3: Verificando login con nueva contrase√±a...');
    
    const loginResponse = await fetch('http://localhost:4001/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: email,
        password: newPassword
      })
    });
    
    const loginData = await loginResponse.json();
    
    console.log('‚úÖ Login verificado:');
    console.log('  - Status:', loginResponse.status);
    console.log('  - Success:', loginData.success);
    
    if (loginData.success) {
      console.log('  - Usuario:', loginData.user.nombre);
      console.log('  - Email:', loginData.user.email);
    }
    
    // Paso 4: Verificar que el token ya no es v√°lido
    console.log('\nüö´ PASO 4: Verificando que el token ya no es v√°lido...');
    
    const reusedTokenResponse = await fetch('http://localhost:4001/api/reset_password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        token: token,
        newPassword: 'otraContrasena123'
      })
    });
    
    const reusedTokenData = await reusedTokenResponse.json();
    
    console.log('‚úÖ Token invalidado correctamente:');
    console.log('  - Status:', reusedTokenResponse.status);
    console.log('  - Success:', reusedTokenData.success);
    console.log('  - Error:', reusedTokenData.error);
    
    // Resumen final
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ RESULTADO FINAL:');
    
    if (forgotData.success && resetData.success && loginData.success && !reusedTokenData.success) {
      console.log('‚úÖ ¬°TODAS LAS PRUEBAS PASARON EXITOSAMENTE!');
      console.log('');
      console.log('‚úÖ Flujo de recuperaci√≥n funcionando correctamente');
      console.log('‚úÖ Generaci√≥n de token funcionando');
      console.log('‚úÖ Validaci√≥n de token funcionando');
      console.log('‚úÖ Cambio de contrase√±a funcionando');
      console.log('‚úÖ Login con nueva contrase√±a funcionando');
      console.log('‚úÖ Invalidaci√≥n de token usado funcionando');
      console.log('');
      console.log('üåê URLs para probar en navegador:');
      console.log('  - Login: http://localhost:5174/login');
      console.log('  - Forgot Password: http://localhost:5174/forgot-password');
      console.log('  - Reset Password: http://localhost:5174/reset-password/[token]');
      
    } else {
      console.log('‚ùå Algunas pruebas fallaron. Revisar logs arriba.');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERROR EN LA PRUEBA:', error.message);
    console.error('Stack:', error.stack);
  }
};

console.log('üöÄ Iniciando prueba completa del sistema de recuperaci√≥n...\n');
testEmailRecoveryFlow();
