import React, { useEffect, useState } from "react";
import "./Rese√±as.css";

const API_URL = import.meta.env.VITE_API_URL || "https://verduleria-backend-m19n.onrender.com/api";

const Rese√±as = ({ rese√±as: rese√±asProp = null, showHeader = true, maxRese√±as = 6 }) => {
  const [rese√±as, setRese√±as] = useState([]);
  const [estadisticas, setEstadisticas] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Si se pasan rese√±as como props, usarlas directamente
    if (rese√±asProp !== null) {
      setRese√±as(Array.isArray(rese√±asProp) ? rese√±asProp.slice(0, maxRese√±as) : []);
      setLoading(false);
      return;
    }

    // Si no hay props, cargar desde la API o localStorage
    const fetchRese√±as = async () => {
      try {
        setLoading(true);
        // Obtener solo rese√±as aprobadas
        const rese√±asResponse = await fetch(`${API_URL}/resenas?aprobadas=true`);
        if (rese√±asResponse.ok) {
          const rese√±asData = await rese√±asResponse.json();
          
          // El backend devuelve {success: true, rese√±as: [...]}
          if (rese√±asData.success && Array.isArray(rese√±asData.rese√±as)) {
            setRese√±as(rese√±asData.rese√±as.slice(0, maxRese√±as));
          } else {
            // Fallback para compatibilidad
            setRese√±as(Array.isArray(rese√±asData) ? rese√±asData.slice(0, maxRese√±as) : []);
          }
          
          // Obtener estad√≠sticas
          try {
            const statsResponse = await fetch(`${API_URL}/resenas/estadisticas`);
            if (statsResponse.ok) {
              const statsData = await statsResponse.json();
              if (statsData.success) {
                setEstadisticas(statsData.estadisticas);
              }
            }
          } catch (statsErr) {
            // No mostrar error por estad√≠sticas
          }
          
          return; // Salir si el backend funciona
        } else {
          throw new Error(`Backend response: ${rese√±asResponse.status}`);
        }
      } catch (err) {
        // Fallback a localStorage
        try {
          const storedRese√±as = JSON.parse(localStorage.getItem('rese√±as_local') || '[]');
          const rese√±asAprobadas = storedRese√±as.filter(r => r.aprobada === true);
          
          setRese√±as(rese√±asAprobadas.slice(0, maxRese√±as));
          
          // Calcular estad√≠sticas locales
          if (rese√±asAprobadas.length > 0) {
            const promedio = rese√±asAprobadas.reduce((sum, r) => sum + r.calificacion, 0) / rese√±asAprobadas.length;
            setEstadisticas({
              promedio: Math.round(promedio * 10) / 10,
              aprobadas: rese√±asAprobadas.length,
              total: storedRese√±as.length
            });
          }
        } catch (localErr) {
          setRese√±as([]);
          setEstadisticas(null);
        }
      } finally {
        setLoading(false);
      }
    };

    fetchRese√±as();
  }, [rese√±asProp, maxRese√±as]);

  // Renderizar estrellas
  const renderEstrellas = (calificacion) => {
    return Array.from({ length: 5 }, (_, index) => (
      <span 
        key={index} 
        className={`estrella ${index < calificacion ? 'llena' : 'vacia'}`}
      >
        ‚òÖ
      </span>
    ));
  };

  // Formatear fecha de manera amigable
  const formatearFecha = (fecha) => {
    const ahora = new Date();
    const fechaRese√±a = new Date(fecha);
    const diferencia = Math.floor((ahora - fechaRese√±a) / (1000 * 60 * 60 * 24));
    
    if (diferencia === 0) return "Hoy";
    if (diferencia === 1) return "Ayer";
    if (diferencia < 7) return `Hace ${diferencia} d√≠as`;
    if (diferencia < 30) return `Hace ${Math.floor(diferencia / 7)} semanas`;
    return fechaRese√±a.toLocaleDateString('es-ES', { 
      month: 'long', 
      year: 'numeric' 
    });
  };

  if (loading) {
    return (
      <section className="rese√±as-section">
        <div className="container">
          <div className="loading">Cargando rese√±as...</div>
        </div>
      </section>
    );
  }

  if (rese√±as.length === 0 && !loading) {
    return (
      <section className="rese√±as-section">
        <div className="container">
          <div className="no-rese√±as">
            <p>No hay rese√±as disponibles en este momento.</p>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="rese√±as-section">
      <div className="container">
        {showHeader && (
          <div className="rese√±as-header">
            <h2>Lo que dicen nuestros clientes</h2>
            {estadisticas && (
              <div className="promedio-general">
                <div className="estrellas-promedio">
                  {renderEstrellas(Math.round(estadisticas.promedio))}
                </div>
                <span className="numero-promedio">{estadisticas.promedio}/5</span>
                <span className="total-rese√±as">({estadisticas.aprobadas} rese√±as)</span>
              </div>
            )}
          </div>
        )}
        
        <div className="rese√±as-grid">
          {rese√±as.map((rese√±a, index) => (
            <div 
              key={rese√±a._id || rese√±a.id || index} 
              className="rese√±a-card"
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <div className="rese√±a-header">
                <div className="avatar">
                  {(rese√±a.usuario?.nombre || rese√±a.nombre || 'Usuario').charAt(0).toUpperCase()}
                </div>
                <div className="usuario-info">
                  <h4>{rese√±a.usuario?.nombre || rese√±a.nombre || 'Usuario An√≥nimo'}</h4>
                  <div className="calificacion">
                    {renderEstrellas(rese√±a.calificacion)}
                  </div>
                </div>
                <div className="fecha">
                  {formatearFecha(rese√±a.fecha_rese√±a || rese√±a.fecha)}
                </div>
              </div>
              
              <div className="comentario">
                <p>"{rese√±a.comentario}"</p>
              </div>
              
              {rese√±a.producto && rese√±a.producto !== 'general' && (
                <div className="producto-tag">
                  üì¶ {rese√±a.producto}
                </div>
              )}
            </div>
          ))}
        </div>
        
        {rese√±as.length >= maxRese√±as && (
          <div className="ver-mas">
            <p>¬øQuieres compartir tu experiencia?</p>
            <button className="btn-escribir-rese√±a">
              ‚úçÔ∏è Escribir rese√±a
            </button>
          </div>
        )}
      </div>
    </section>
  );
};

export default Rese√±as;
